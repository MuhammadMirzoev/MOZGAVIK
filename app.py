from flask import Flask, request, jsonify, render_template_string
import requests
import traceback, uuid, re, os, pprint

app = Flask(__name__)

APPROXINATION_TOKEN = '379f5469-cb64-47ec-bab1-462ee3824c1b'

# =========================
#  External API settings
# =========================
API_URL = "https://approxination.com/v1/chat/completions"
HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {APPROXINATION_TOKEN}"
}

# =========================
#  Utils
# =========================
def redact(text: str) -> str:
    """Mask tokens/secrets in logs and responses."""
    if not text:
        return text
    text = re.sub(r'Bearer\s+[A-Za-z0-9\-\._]+', 'Bearer ***', text)
    # Limit length to avoid flooding logs/response
    return text[:4000]

def build_prompt(book_text: str, opts: dict) -> str:
    """Constructs a styled, constrained prompt for the game generator."""
    vibe = opts.get("vibe", "neon")
    palette = opts.get("palette", "dark")
    difficulty = int(opts.get("difficulty", 60) or 60)
    game_type = opts.get("game_type", "quiz")  # –ü–û–õ–£–ß–ê–ï–ú –¢–ò–ü –ò–ì–†–´
    long_code = bool(opts.get("long_code", True))
    audio = bool(opts.get("audio", False))
    procedural = bool(opts.get("procedural", True))

    target_length = "–º–∏–Ω–∏–º—É–º 1000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞" if long_code else "—Å—Ç–æ–ª—å–∫–æ –∫–æ–¥–∞, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –±–µ–∑ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫"
    audio_line = "–î–æ–±–∞–≤—å –º—É–∑—ã–∫—É –∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã." if audio else "–ó–≤—É–∫ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
    proc_line = "–î–æ–±–∞–≤—å –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Ä–æ–≤–Ω–µ–π, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ." if procedural else "–ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ –¥–æ–±–∞–≤–ª—è–π."
    detail_hint = "–í—ã—Å–æ–∫–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤." if difficulty >= 66 else ("–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏." if difficulty >= 33 else "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —á–∏—Ç–∞–µ–º–æ—Å—Ç—å.")

    # –û–ü–ò–°–ê–ù–ò–ï –¢–ò–ü–û–í –ò–ì–†
    game_type_descriptions = {
        "quiz": "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–∏–∑ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫–Ω–∏–≥–∏",
        "dialog": "–î–∏–∞–ª–æ–≥–æ–≤–∞—è –∏–≥—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–ø–ª–∏–∫ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Å—é–∂–µ—Ç–∞",
        "novel": "–í–∏–∑—É–∞–ª—å–Ω–∞—è –Ω–æ–≤–µ–ª–ª–∞ —Å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ–º –∏ –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–±–æ—Ä–∞–º–∏",
        "platformer": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä —Å –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –ø–æ –º–æ—Ç–∏–≤–∞–º —Å—é–∂–µ—Ç–∞",
        "arcade": "–î–∏–Ω–∞–º–∏—á–Ω–∞—è –∞—Ä–∫–∞–¥–∞, –æ—Ç—Ä–∞–∂–∞—é—â–∞—è –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–Ω–∏–≥–∏",
        "roguelike": "–†–æ–≥–∞–ª–∏–∫ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º"
    }

    game_type_instruction = game_type_descriptions.get(game_type, "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–∏–∑ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫–Ω–∏–≥–∏")

    prompt = f"""
–¢—ã ‚Äî –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è **2D-–∏–≥—Ä** –Ω–∞ **JavaScript + HTML5 Canvas**.
–¢–µ–±–µ –¥–∞–Ω –æ—Ç—Ä—ã–≤–æ–∫ —Ç–µ–∫—Å—Ç–∞. –ü–æ –Ω–µ–º—É –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å —Å–º—ã—Å–ª —Ç–µ–∫—Å—Ç–∞.

üé® –≠—Å—Ç–µ—Ç–∏–∫–∞/–≤–∞–π–±: **{vibe}**, –ø–∞–ª–∏—Ç—Ä–∞: **{palette}**. {detail_hint}
üéÆ –¢–∏–ø –∏–≥—Ä—ã: **{game_type_instruction}**.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–≥—Ä–µ:
1) –ú–µ—Ö–∞–Ω–∏–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–¥–µ–∏/—Å—é–∂–µ—Ç/–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ç–µ–∫—Å—Ç–∞.
2) –£ –∏–≥—Ä—ã –µ—Å—Ç—å —Ü–µ–ª—å –∏ ¬´—Ñ–∏–Ω–∏—à¬ª, –≥–¥–µ –∏–≥—Ä–æ–∫ —è–≤–Ω–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –º—ã—Å–ª—å.
3) –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª—é—á–∞–µ—Ç:
   - –°—á—ë—Ç—á–∏–∫ –æ—á–∫–æ–≤
   - –ö–Ω–æ–ø–∫—É ¬´–°—Ç–æ–ø¬ª
   - –ö–Ω–æ–ø–∫—É ¬´–í—ã—Ö–æ–¥¬ª
   - –ü–æ–¥—Å–∫–∞–∑–∫–∏
   - –≠–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—á—ë—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞¬ª
4) –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–æ–ª—Å—Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É **1:1**.
5) –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –¥–æ–ª–∂–Ω—ã **–≤–º–µ—â–∞—Ç—å—Å—è** –≤ –æ—Ç–≤–µ–¥—ë–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏ –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–ø—Ä—è—Ç–Ω–æ (–±–µ–∑ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–π).
6) –î–æ–±–∞–≤—å –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –∞–∫–∫—É—Ä–∞—Ç–Ω—É—é —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ —Å–µ—Ç–∫—É. {audio_line}
7) {proc_line}
8) –ö–æ–¥ ‚Äî **—á–∏—Å—Ç—ã–π HTML + JS + Canvas**, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ `game.html` –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
9) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ–Ω—è—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.
10) –í—ã–¥–∞–π {target_length}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è, –Ω–æ –±–µ–∑ ¬´–≤–æ–¥—ã¬ª.
11) –°—Ç–∏–ª—å –∏–≥—Ä—ã: {game_type_instruction}

–í–∞–∂–Ω–æ:
- –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±–∏—Ä–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚Äî –¥–µ–ª–∞–π –∏—Ö –¥–æ—Å—Ç–∏–∂–∏–º—ã–º–∏.
- –ù–µ –ª–æ–º–∞–π –≤–µ—Ä—Å—Ç–∫—É: –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ ¬´–µ—Ö–∞—Ç—å¬ª.
- –ò—Å–ø–æ–ª—å–∑—É–π –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∫–Ω–æ–ø–∫–∏, –ø–∞–Ω–µ–ª–∏, –æ–≤–µ—Ä–ª–µ–∏).
- –ò–∑–±–µ–≥–∞–π –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –≤—Å—ë ‚Äî –≤ –æ–¥–Ω–æ–º HTML.

____________________________________________________________

–¢–ï–ö–°–¢ –î–õ–Ø –ò–ì–†–´:
{book_text}

____________________________________________________________

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π **—á–∏—Å—Ç—ã–π HTML** (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤/–æ–±—ä—è—Å–Ω–µ–Ω–∏–π), –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã–π –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∫–∞–∫ `game.html`.
"""
    return prompt

# =========================
#  HTML Page (Neon-Dark UI)
# =========================
HTML_PAGE = """
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–≥—Ä –ø–æ —Ç–µ–∫—Å—Ç—É</title>
  <style>
    :root{
      --bg:#0d0f14; --panel:#141824; --muted:#7b8191; --brand:#6ee7ff; --brand-2:#8b5cf6; --border:#202536; --txt:#e6e7ee; --txt-2:#b8bcc9;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font-family:Inter,system-ui,Segoe UI,Roboto,Arial,sans-serif; background: radial-gradient(1200px 1200px at 120% -10%, rgba(110,231,255,.12), transparent 55%),
                radial-gradient(1000px 1000px at -20% 120%, rgba(139,92,246,.10), transparent 55%), var(--bg);
      color:var(--txt); display:flex; flex-direction:column;
    }
    header{
      padding:16px 22px; border-bottom:1px solid var(--border); backdrop-filter:saturate(150%) blur(6px);
      background:linear-gradient(180deg, rgba(20,24,36,.65), rgba(20,24,36,.35));
      display:flex; align-items:center; justify-content:space-between; gap:16px; position:sticky; top:0; z-index:10;
    }
    .logo{display:flex; align-items:center; gap:12px; font-weight:700; letter-spacing:.3px}
    .logo-badge{width:28px;height:28px;border-radius:8px;background:linear-gradient(135deg,var(--brand),var(--brand-2)); display:grid; place-items:center; color:#041016; font-weight:800}
    .sub{color:var(--txt-2); font-size:12px}
    .container{flex:1; display:grid; gap:18px; grid-template-columns: 420px 1fr; padding:18px}
    @media (max-width:1100px){ .container{grid-template-columns:1fr; } }
    .card{background:linear-gradient(0deg, rgba(255,255,255,.015), rgba(255,255,255,.03)); border:1px solid var(--border); border-radius:16px; overflow:hidden; box-shadow:0 10px 30px rgba(0,0,0,.25)}
    .card h3{margin:0; padding:14px 16px; border-bottom:1px solid var(--border); font-size:14px; letter-spacing:.3px; color:#cfd3e2}
    .card-body{padding:14px; display:flex; flex-direction:column; gap:12px}
    .drop{position:relative; border:1px dashed #2a3147; border-radius:12px; padding:10px; transition:.2s background;}
    .drop.dragover{background:rgba(110,231,255,.06); border-color:var(--brand)}
    textarea{
      width:100%; min-height:280px; resize:vertical; border:0; outline:none; background:#0b0e16; color:var(--txt);
      border-radius:10px; padding:12px; line-height:1.5; font-size:14px;
    }
    .muted{color:var(--muted); font-size:12px}
    .row{display:flex; gap:10px; flex-wrap:wrap}
    .row > *{flex:1}
    .chip{display:flex; align-items:center; justify-content:space-between; gap:8px; padding:10px 12px; border:1px solid var(--border); border-radius:10px; background:#0b0e16}
    select, input[type="range"], input[type="checkbox"]{width:100%}
    .range-label{display:flex; align-items:center; justify-content:space-between; font-size:12px; color:var(--txt-2)}
    .switch{display:flex; align-items:center; gap:8px; font-size:13px; color:var(--txt-2)}
    .actions{display:flex; gap:10px; flex-wrap:wrap}
    button{
      cursor:pointer; border:1px solid var(--border); background:linear-gradient(180deg,#12192a,#0c1220); color:var(--txt);
      padding:12px 14px; border-radius:12px; font-weight:600; letter-spacing:.2px; transition:.2s transform, .2s border-color, .2s background;
    }
    button:disabled{opacity:.6; cursor:not-allowed}
    .btn-primary{background:linear-gradient(135deg, rgba(110,231,255,.18), rgba(139,92,246,.18)); border-color:#2b344f}
    .btn-primary:hover{transform:translateY(-1px); border-color:#3e4971}
    .btn-ghost{background:transparent}
    .kbd{background:#0b0e16; border:1px solid var(--border); padding:2px 6px; border-radius:6px; font-size:11px; color:#cbd5e1}
    .preview-wrap{display:flex; flex-direction:column; gap:10px; height:100%}
    .helper{display:flex; align-items:center; justify-content:space-between; padding:0 2px}
    .frame{flex:1; border:1px solid var(--border); border-radius:14px; overflow:hidden; background:#fff; position:relative;}
    iframe{width:100%; height:100%; border:0}
    .loader{
      position:absolute; inset:0; display:none; align-items:center; justify-content:center; flex-direction:column; gap:10px;
      background:linear-gradient(0deg, rgba(13,15,20,.55), rgba(13,15,20,.55));
      color:#dbeafe; font-weight:600; font-size:14px;
    }
    .loader.show{display:flex}
    .spinner{width:38px;height:38px;border-radius:50%;border:3px solid rgba(255,255,255,.15); border-top-color:var(--brand); animation:spin 1s linear infinite}
    @keyframes spin{to{transform:rotate(360deg)}}
    .pill{padding:6px 10px; border:1px solid var(--border); border-radius:999px; font-size:12px; color:var(--txt-2)}
    .stat{display:flex; align-items:center; gap:8px; font-size:12px; color:var(--txt-2)}
    .stat b{color:#e2e8f0}
    .footer{padding:10px 16px; border-top:1px solid var(--border); display:flex; justify-content:space-between; align-items:center; color:var(--muted); font-size:12px}
    /* Error box */
    #errorBox{display:none; border:1px solid #3a3f55; background:#0b0e16; color:#e2e8f0; border-radius:12px; padding:10px; font-size:13px;}
    #errorBox pre{white-space:pre-wrap; margin:8px 0 0 0; color:#cbd5e1;}
  </style>
</head>
<body>
  <header>
    <div class="logo">
      <div class="logo-badge">GM</div>
      <div>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–≥—Ä <div class="sub">–ø–æ —Ç–µ–∫—Å—Ç–∞–º ‚Äî –∫—Ä–∞—Å–∏–≤–æ, –±—ã—Å—Ç—Ä–æ, –º–æ—â–Ω–æ</div></div>
    </div>
    <div class="pill">Canvas ‚Ä¢ HTML ‚Ä¢ JS</div>
  </header>

  <main class="container">
    <!-- Left: Editor + Controls -->
    <section class="card">
      <h3>–¢–µ–∫—Å—Ç –∫–Ω–∏–≥–∏</h3>
      <div class="card-body">
        <div id="dropZone" class="drop">
          <textarea id="bookText" placeholder="–í—Å—Ç–∞–≤—å —Å—é–¥–∞ –æ—Ç—Ä—ã–≤–æ–∫. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å .txt –∏–ª–∏ .md —Ñ–∞–π–ª –Ω–∞ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å‚Ä¶"></textarea>
        </div>
        <div class="helper">
          <span class="stat"><b id="wordCount">0</b> —Å–ª–æ–≤</span>
          <span class="muted">–°–æ–≤–µ—Ç: —É–¥–µ—Ä–∂–∏–≤–∞–π <span class="kbd">Ctrl</span> + <span class="kbd">V</span> –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤</span>
        </div>

        <div class="row">
          <div class="chip">
            <div style="font-size:12px;color:var(--txt-2);">–í–∞–π–±</div>
            <select id="vibe">
              <option value="cinematic">Cinematic</option>
              <option value="arcade">Arcade</option>
              <option value="cozy">Cozy</option>
              <option value="neon" selected>Neon</option>
              <option value="retro">Retro</option>
            </select>
          </div>
          <div class="chip">
            <div style="font-size:12px;color:var(--txt-2);">–ü–∞–ª–∏—Ç—Ä–∞</div>
            <select id="palette">
              <option value="dark" selected>–¢–µ–º–Ω–∞—è</option>
              <option value="light">–°–≤–µ—Ç–ª–∞—è</option>
              <option value="paper">–ë—É–º–∞–≥–∞</option>
              <option value="vapor">Vaporwave</option>
            </select>
          </div>
          <!-- –ù–û–í–û–ï: —Ç–∏–ø –∏–≥—Ä—ã -->
          <div class="chip">
            <div style="font-size:12px;color:var(--txt-2);">–¢–∏–ø –∏–≥—Ä—ã</div>
            <select id="gameType">
              <option value="quiz" selected>–ö–≤–∏–∑</option>
              <option value="dialog">–î–∏–∞–ª–æ–≥</option>
              <option value="novel">–ù–æ–≤–µ–ª–ª–∞</option>
              <option value="platformer">–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä</option>
              <option value="arcade">–ê—Ä–∫–∞–¥–∞</option>
              <option value="roguelike">–†–æ–≥–∞–ª–∏–∫</option>
            </select>
          </div>
        </div>

        <div class="chip">
          <div class="range-label">
            <span>–°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–∏–∑–∞–π–Ω–∞/–∞–Ω–∏–º–∞—Ü–∏–π</span>
            <span id="difficultyVal">60%</span>
          </div>
          <input id="difficulty" type="range" min="0" max="100" value="60" />
        </div>

        <div class="row">
          <label class="switch chip" style="flex:1">
            <input id="longCode" type="checkbox" checked />
            <span>–î–ª–∏–Ω–Ω—ã–π –∫–æ–¥ (‚âà 1000+ —Å—Ç—Ä–æ–∫)</span>
          </label>
          <label class="switch chip" style="flex:1">
            <input id="withAudio" type="checkbox" />
            <span>–ó–≤—É–∫/–º—É–∑—ã–∫–∞</span>
          </label>
          <label class="switch chip" style="flex:1">
            <input id="procedural" type="checkbox" checked />
            <span>–ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</span>
          </label>
        </div>

        <div class="actions">
          <button id="generateBtn" class="btn-primary">–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É</button>
          <button id="clearBtn" class="btn-ghost">–û—á–∏—Å—Ç–∏—Ç—å</button>
          <button id="sampleBtn" class="btn-ghost">–í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä</button>
        </div>
      </div>
      <div class="footer">
        <span>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ—Ä–µ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–µ—Ä—Å—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ ¬´–ø–æ–µ—Ö–∞–≤—à–∏—Ö¬ª –±–ª–æ–∫–æ–≤)</span>
        <span>v2 ‚Äî ¬´neon dark¬ª</span>
      </div>
    </section>

    <!-- Right: Preview -->
    <section class="card">
      <h3>–ò–≥—Ä–∞</h3>
      <div class="card-body preview-wrap">
        <div class="helper">
          <span class="muted">–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –æ–∫–Ω–µ –Ω–∏–∂–µ</span>
          <div class="stat"><b>1:1</b> —Ö–æ–ª—Å—Ç ‚Ä¢ <span class="muted">Canvas</span></div>
        </div>

        <div class="frame">
          <div id="loader" class="loader">
            <div class="spinner"></div>
            <div id="loaderText">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä—ã‚Ä¶</div>
          </div>
          <iframe id="gameFrame"></iframe>
        </div>

        <!-- Visible error panel -->
        <div id="errorBox">
          <div style="display:flex; justify-content:space-between; align-items:center; gap:8px;">
            <b>–û—à–∏–±–∫–∞</b>
            <button id="hideErrBtn" class="btn-ghost" style="padding:6px 10px;">–°–∫—Ä—ã—Ç—å</button>
          </div>
          <pre id="errorText"></pre>
        </div>

        <div class="row">
          <button id="downloadBtn" class="btn-primary" disabled>–°–∫–∞—á–∞—Ç—å –∫–∞–∫ game.html</button>
          <button id="resetFrameBtn" class="btn-ghost">–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</button>
        </div>
      </div>
    </section>
  </main>

  <script>
    const txt = document.getElementById("bookText");
    const wordCount = document.getElementById("wordCount");
    const loader = document.getElementById("loader");
    const loaderText = document.getElementById("loaderText");
    const frame = document.getElementById("gameFrame");
    const drop = document.getElementById("dropZone");
    const downloadBtn = document.getElementById("downloadBtn");

    const vibe = document.getElementById("vibe");
    const palette = document.getElementById("palette");
    const difficulty = document.getElementById("difficulty");
    const difficultyVal = document.getElementById("difficultyVal");
    const longCode = document.getElementById("longCode");
    const withAudio = document.getElementById("withAudio");
    const procedural = document.getElementById("procedural");
    const gameType = document.getElementById("gameType"); // –ù–û–í–û–ï

    const generateBtn = document.getElementById("generateBtn");
    const clearBtn = document.getElementById("clearBtn");
    const sampleBtn = document.getElementById("sampleBtn");
    const resetFrameBtn = document.getElementById("resetFrameBtn");

    const errBox = document.getElementById("errorBox");
    const errText = document.getElementById("errorText");
    document.getElementById("hideErrBtn").onclick = () => errBox.style.display = "none";

    function updateWordCount(){
      const words = txt.value.trim().split(/\\s+/).filter(Boolean);
      wordCount.textContent = words.length;
    }
    txt.addEventListener("input", updateWordCount);
    updateWordCount();

    difficulty.addEventListener("input", () => {
      difficultyVal.textContent = difficulty.value + "%";
    });

    // Drag & Drop
    ;["dragenter","dragover"].forEach(ev => drop.addEventListener(ev, e => {
      e.preventDefault(); e.stopPropagation(); drop.classList.add("dragover");
    }));
    ;["dragleave","drop"].forEach(ev => drop.addEventListener(ev, e => {
      e.preventDefault(); e.stopPropagation(); drop.classList.remove("dragover");
    }));
    drop.addEventListener("drop", async (e) => {
      const file = e.dataTransfer.files?.[0];
      if(!file) return;
      if(!/\\.(txt|md|csv|log|rtf)$/i.test(file.name)){ alert("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .txt / .md / .rtf / .csv / .log"); return; }
      const text = await file.text();
      txt.value = text;
      updateWordCount();
    });

    // –£–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º blob: URL –¥–ª—è iframe, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫
    let currentBlobUrl = null;
    function setFrameSrcFromHTML(html){
      if (currentBlobUrl) { URL.revokeObjectURL(currentBlobUrl); currentBlobUrl = null; }
      const blob = new Blob([html], { type: "text/html" });
      const url = URL.createObjectURL(blob);
      currentBlobUrl = url;
      frame.src = url;
    }

    function showLoader(state, msg){
      loader.classList.toggle("show", state);
      if(msg) loaderText.textContent = msg;
    }

    function saveBlob(filename, content){
      const blob = new Blob([content], {type: "text/html"});
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url; a.download = filename; a.click();
      URL.revokeObjectURL(url);
    }

    function showError(data){
      const { status, error, details, trace_id, source } = (data || {});
      const parts = [];
      if (error)  parts.push(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error}`);
      if (status) parts.push(`HTTP —Å—Ç–∞—Ç—É—Å: ${status}`);
      if (source) parts.push(`–ò—Å—Ç–æ—á–Ω–∏–∫: ${source}`);
      if (trace_id) parts.push(`trace_id: ${trace_id}`);
      if (details) parts.push(`–î–µ—Ç–∞–ª–∏:\\n${(typeof details === 'string' ? details : JSON.stringify(details, null, 2))}`);
      errText.textContent = parts.join('\\n\\n');
      errBox.style.display = "block";
    }

    clearBtn.addEventListener("click", () => {
      txt.value = "";
      updateWordCount();
      if (currentBlobUrl) { URL.revokeObjectURL(currentBlobUrl); currentBlobUrl = null; }
      frame.removeAttribute("src");
      downloadBtn.disabled = true;
      errBox.style.display = "none";
    });

    resetFrameBtn.addEventListener("click", () => {
      if (currentBlobUrl) { URL.revokeObjectURL(currentBlobUrl); currentBlobUrl = null; }
      frame.removeAttribute("src");
    });

    sampleBtn.addEventListener("click", () => {
      txt.value = "–≠—Ç–æ –æ—Ç—Ä—ã–≤–æ–∫ —Å —Å–∏–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –º–µ—Ç–∞—Ñ–æ—Ä–æ–π: –≥–µ—Ä–æ–π —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å—Å—ã–ø–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–∞–∂–¥–æ–µ ‚Äî –∫–∞–∫ —Å–≤–µ—Ç—è—â–∏–π—Å—è –æ—Å–∫–æ–ª–æ–∫. –ö–æ–≥–¥–∞ –≤—Å–µ –æ—Å–∫–æ–ª–∫–∏ —Å–æ–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ–¥ –Ω–∏–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å ‚Äî –≤—ã–±–æ—Ä –≤–∞–∂–Ω–µ–µ —Å—Ç—Ä–∞—Ö–∞.";
      updateWordCount();
    });

    generateBtn.addEventListener("click", async () => {
      const text = txt.value.trim();
      if(!text){ alert("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–∏–≥–∏!"); return; }

      showLoader(true, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä—ã‚Ä¶");
      errBox.style.display = "none";
      downloadBtn.disabled = true;

      try{
        const response = await fetch("/generate", {
          method:"POST",
          headers:{"Content-Type":"application/json"},
          body: JSON.stringify({
            text,
            vibe: vibe.value,
            palette: palette.value,
            difficulty: Number(difficulty.value),
            long_code: !!longCode.checked,
            audio: !!withAudio.checked,
            procedural: !!procedural.checked,
            game_type: gameType.value
          })
        });

        const raw = await response.text();
        let payload = null;
        try { payload = raw ? JSON.parse(raw) : null; } catch(_){ /* non-JSON */ }

        if(!response.ok){
          showError(payload || { status: response.status, error: response.statusText, details: raw });
          return;
        }

        if(!payload || !payload.code){
          showError({ error: "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –ø–æ–ª—è code", details: raw });
          return;
        }

        setFrameSrcFromHTML(payload.code);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ window.gameMeta –≤ iframe (same-origin –¥–ª—è blob:)
        frame.onload = () => {
          try {
            const meta = frame.contentWindow && frame.contentWindow.gameMeta;
            if (!meta) {
              showError({ error: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", details: "window.gameMeta –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ iframe. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—ã–≤–æ–¥–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ." });
              return;
            }
            const required = ["hasStop","hasExit","hasHint","endScreen","isSquareCanvas","noExternalDeps"];
            const missing = required.filter(k => !(k in meta));
            const bad = [];
            if (meta.noExternalDeps === false) bad.push("noExternalDeps=false");
            if (missing.length || bad.length) {
              showError({
                error: "–ß–µ–∫–ª–∏—Å—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                details: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: " + missing.join(", ") + (bad.length? ("\\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: "+bad.join(", ")):"")
              });
            }
          } catch (e) {
            showError({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å gameMeta", details: String(e) });
          }
        };

        downloadBtn.disabled = false;
        downloadBtn.onclick = () => saveBlob("game.html", payload.code);

      }catch(err){
        showError({ error: "–°–µ—Ç–µ–≤–∞—è/JS –æ—à–∏–±–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ", details: String(err) });
      }finally{
        showLoader(false);
      }
    });
  </script>
</body>
</html>
"""

def _request_timeout():
    # –ï—Å–ª–∏ NO_TIMEOUT=1|true|yes ‚Äî –≤–æ–æ–±—â–µ –Ω–µ —Å—Ç–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç (–∂–¥—ë–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
    flag = str(os.getenv("NO_TIMEOUT", "")).strip().lower()
    if flag in ("1", "true", "yes", "on"):
        return None  # requests –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    # –ò–Ω–∞—á–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–≤–æ–∏ –æ–±—ã—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å)
    # return (10, 300)  # –ø—Ä–∏–º–µ—Ä: (connect_timeout, read_timeout)
    return None  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–∂–µ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞

# =========================
#  Routes
# =========================
@app.route("/")
def index():
    return render_template_string(HTML_PAGE)

@app.route("/generate", methods=["POST"])
def generate_game():
    trace_id = str(uuid.uuid4())[:8]
    data = request.json or {}
    book_text = data.get("text", "") or ""

    if not book_text.strip():
        return jsonify({
            "error": "–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π",
            "hint": "–ü–µ—Ä–µ–¥–∞–π –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ text.",
            "trace_id": trace_id
        }), 400

    # Collect options for prompt
    opts = {
        "vibe": data.get("vibe"),
        "palette": data.get("palette"),
        "difficulty": data.get("difficulty"),
        "long_code": data.get("long_code"),
        "audio": data.get("audio"),
        "procedural": data.get("procedural"),
        "game_type": data.get("game_type"),  # –ù–û–í–û–ï
    }

    prompt = build_prompt(book_text, opts)
    print("–ü—Ä–æ–º–ø—Ç:")
    print(prompt)
    print()

    # Call external model API
    try:
        api_payload = {
            "messages": [{"role": "user", "content": prompt}],
            "model": "solver"
        }
        r = requests.post(API_URL, headers=HEADERS, json=api_payload, timeout=_request_timeout())
    except requests.exceptions.Timeout as e:
        app.logger.exception("Timeout %s", trace_id)
        return jsonify({
            "error": "–í–Ω–µ—à–Ω–∏–π API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è",
            "hint": "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —É–º–µ–Ω—å—à–∞–π –æ–±—ä—ë–º —Ç–µ–∫—Å—Ç–∞.",
            "details": redact(str(e)),
            "trace_id": trace_id,
            "source": "external_api"
        }), 504
    except requests.exceptions.RequestException as e:
        app.logger.exception("HTTP error %s", trace_id)
        return jsonify({
            "error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API",
            "details": redact(str(e)),
            "trace_id": trace_id,
            "source": "external_api"
        }), 502

    # Non-2xx from upstream ‚Äî return raw body for visibility
    content_text = r.text
    if not r.ok:
        app.logger.error("Upstream %s status=%s body=%s", trace_id, r.status_code, redact(content_text))
        return jsonify({
            "error": "–í–Ω–µ—à–Ω–∏–π API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É",
            "status": r.status_code,
            "details": redact(content_text),
            "trace_id": trace_id,
            "source": "external_api"
        }), 502

    # Parse JSON
    try:
        result = r.json()
        game_code = result["choices"][0]["message"]["content"]
        if not game_code or "<html" not in game_code.lower():
            raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ HTML –∏–≥—Ä—ã")
        print("–ö–æ–¥:")
        pprint.pprint(game_code)
        print()
        return jsonify({"code": game_code, "trace_id": trace_id})
    except Exception as e:
        app.logger.exception("Parse error %s", trace_id)
        return jsonify({
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API",
            "details": redact(content_text) or redact(str(e)),
            "trace_id": trace_id,
            "source": "parsing"
        }), 500

# =========================
#  Global error handler
# =========================
@app.errorhandler(Exception)
def handle_unexpected(e):
    trace_id = str(uuid.uuid4())[:8]
    app.logger.exception("Unhandled %s", trace_id)
    return jsonify({
        "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        "details": redact(str(e)),
        "trace_id": trace_id,
        "source": "backend"
    }), 500

# =========================
#  Entrypoint
# =========================
if __name__ == "__main__":
    # Run dev server
    app.run(host="0.0.0.0", port=5000, debug=True)
